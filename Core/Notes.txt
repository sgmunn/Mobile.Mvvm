# Binding from layout

It is possible for us to bind from layout if we have our own LayoutInflator that records what the binding are
for each view and we then pass that off to a bind method. I'm not so worried by that for now but can be an area
of research later on.




- Activity state management example and best practice
  -- load / save view model to fake data store
  -- not just view model "data" state, but enabled / disabled properties as well
  -- things that might be consider transient state -- which is what OnSave... is supposed to be for


- custom layout inflator for android, apply bindings from the view axml
- complex property paths
- look at support for $parent, $root in property paths
    this will require that binding scopes or contexts have a notion of a parent scope 
    we can use this notion for injected properties as well.

- need to get converter binding expressions parsed
    need to register binding converters, type mapper etc
    need to parse binding parameter, basic types I guess (int, decimal, string)
    
- time to start using this in an application
    berry app maybe?


- injection scopes need to have parent scopes so that you can get the injected value of an object regardless of where that value was added.

- need a mechanism to bind a button to a command

- binding parser, like mvvm cross or ko
    - focus on being able to do the standard stuff + converters
    - the delegate property accessors are really only need for really complex and performant binding, reflection otherwise is fine
    - <TargetPropertyPath> <modeExpression> <sourcePropertyExpression>
    
     <TargetPropertyPath> = name
                            name.child ...
                            name[index] .. for indexed list propeties
                            
    <modeExpression>        >  |  <  | :   
    
    <sourcePropertyExpression>
                            <propertyPath> | <converterFunction>
                            
    <converterFunction>
                            <converterFunctionName> (  <propertyPath> , <convertParam>  )     
                            
    <propertyPath>
                            [ $parent.<path> ] | [ $root.<path> ] |  <path>                                                                 
        

- ko has $parent, $root etc for binding scope, we should allow the same thing
    - our binding scope gives us a way of grouping bindings together for lifetime management purposes
    - for this to work, we need a way to link view models in a parent - child chain

- need to support more complex property paths, eg TextLabel.Text

- need to support having bindings in the view axml for android, as this will be the preferred mechanism

- for iOS, we need to have either strong bindings or create our own stubb classes
    not sure of the best way to go, on the face of it, a simple wrapper for UITableViewCell would probably do
    the reason is that UITableViewCell, being a "built in" UIxxx control, gets GC'd before the iOS native 
    object and is re-instantiated whenever it needs to be. Because we have weak references everywhere
    our bindings get broken. Strong references fix that, but we have to clean up properly.
    If we have a wrapper class, our managed object stays around for as long as the native object exists
    
    I might just go for the wrapper classes as it will give the basis of the dialog style views


- Activity - this is a root
    owns a RootViewModelContext
    fragments have a binding context that links to the root?

    OnCreate
        create UI, create view model, bind
        start load task, if not already, and continue with the load of the UI
        load task must be cancellable, so that the UI update isn't done if we navigate away
        can extend this to one for each fragment

    OnPause
        save data from view model to persistent state
        cancel load task

    - load needs to realise if can be reused, or if it needs to re-execute
      cases: activity only, activity and fragment (retain, non retain, add to back stack etc)
      switch activity, keep activities, don't keep activities.



