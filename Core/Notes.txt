# Binding from layout

It is possible for us to bind from layout if we have our own LayoutInflator that records what the binding are
for each view and we then pass that off to a bind method. I'm not so worried by that for now but can be an area
of research later on.

# Inline Error display

For Android, we can simply bind "Error" on a text edit to a property on the view model
For iOS, we can either build our own widget or we can inject something like Mxv IErrorDisplay

# Message Display

We have an interface for displaying simple messages to the user and acting upon an "Ok" / "Cancel" choice. This interface 
can be passed into a view model.

# Navigation Service

We have an interface that allows a simple push / pop based navigation model as well as a modal dialog option. We might want to 
enhance this as we go. Additionally, we can pass simple string arguments to the target of the navigation.

# Binding to Dialogs

As dialogs are essentially Fragments or ViewControllers, we use the same binding technique that we would use for any other view.

# Menus

No direct support for menus as yet. Our strategy this menus at the moment would be to invoke commands on the view model and to
update enabled states based on those ICommands.

# Activity / Fragment Lifecycle

Load and bind the view model in OnResume, save / unbind in OnPause.
Remember that it is not just the view model's underlying data that is saved, but transient state like a button enabled state etc.





# TODO's

- date time picker
- complex property paths
- look at support for $parent, $root in property paths
    this will require that binding scopes or contexts have a notion of a parent scope 
    we can use this notion for injected properties as well.
- need to get converter binding expressions parsed
    need to register binding converters, type mapper etc
    need to parse binding parameter, basic types I guess (int, decimal, string)
- custom layout inflator for android, apply bindings from the view axml
- ?? injection scopes need to have parent scopes so that you can get the injected value of an object regardless of where that value was added.


# Other Thoughts

- binding parser, like mvvm cross or ko
    - focus on being able to do the standard stuff + converters
    - the delegate property accessors are really only need for really complex and performant binding, reflection otherwise is fine
    - <TargetPropertyPath> <modeExpression> <sourcePropertyExpression>
    
     <TargetPropertyPath> = name
                            name.child ...
                            name[index] .. for indexed list propeties
                            
    <modeExpression>        >  |  <  | :   
    
    <sourcePropertyExpression>
                            <propertyPath> | <converterFunction>
                            
    <converterFunction>
                            <converterFunctionName> (  <propertyPath> , <convertParam>  )     
                            
    <propertyPath>
                            [ $parent.<path> ] | [ $root.<path> ] |  <path>                                                                 
        

- ko has $parent, $root etc for binding scope, we should allow the same thing
    - our binding scope gives us a way of grouping bindings together for lifetime management purposes
    - for this to work, we need a way to link view models in a parent - child chain

- for iOS, we need to have either strong bindings or create our own stubb classes
    not sure of the best way to go, on the face of it, a simple wrapper for UITableViewCell would probably do
    the reason is that UITableViewCell, being a "built in" UIxxx control, gets GC'd before the iOS native 
    object and is re-instantiated whenever it needs to be. Because we have weak references everywhere
    our bindings get broken. Strong references fix that, but we have to clean up properly.
    If we have a wrapper class, our managed object stays around for as long as the native object exists
    
    I might just go for the wrapper classes as it will give the basis of the dialog style views





